{"version":3,"sources":["pages/other/Cart.js"],"names":["connect","state","cartItems","cartData","currency","currencyData","products","productData","dispatch","addToCart","item","addToast","quantityCount","decrementQty","removeFromCart","removeAllFromCart","replace","data","isLogin","SetUserLogin","location","useState","useToasts","setProducts","CartItems","setCartItems","setcall","loading","setLoading","console","log","pathname","cartTotalPrice","useEffect","fetch","then","res","status","appearance","autoDismiss","json","forEach","element","index","product","find","obj","_id","temp","stock","discountedPrice","productName","category","price","quantity","modifyCartItems","catch","err","name","content","to","process","headerTop","className","length","map","cartItem","key","finalProductPrice","currencyRate","toFixed","finalDiscountedPrice","discount","Math","floor","src","image","alt","selectedProductColor","selectedProductSize","currencySymbol","onClick","type","value","readOnly","disabled","undefined"],"mappings":"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","file":"static/js/15.9ae8c31a.chunk.js","sourcesContent":["import \"../../assets/css/OrderStatus.css\"\nimport PropTypes from \"prop-types\";\nimport React, { Fragment, useState ,useEffect} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport MetaTags from \"react-meta-tags\";\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\nimport { connect } from \"react-redux\";\nimport { getDiscountPrice } from \"../../helpers/product\";\nimport Loading from \"../../components/Loading\";\nimport {\n  addToCart,\n  decrementQty,\n  removeFromCart,\n  cartItemStock,\n  removeAllFromCart,\n  replace\n} from \"../../redux/actions/cartActions\";\nimport LayoutOne from \"../../layouts/LayoutOne\";\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\nconst imageURL = \"http://localhost:9000/static/\";\n// const imageURL = \"https://infinite-sands-08332.herokuapp.com/static/\";\n// const URL = \"https://infinite-sands-08332.herokuapp.com/\";\nconst URL = \"http://localhost:9000/sone/\";\nconst Cart = ({\n  isLogin,\n  SetUserLogin,\n  location,\n  cartItems,\n  products,\n  currency,\n  decrementQty,\n  addToCart,\n  removeFromCart,\n  replace,\n  removeAllFromCart\n}) => {\n  const [quantityCount] = useState(1);\n  const { addToast } = useToasts();\n  const [Products, setProducts] = useState(products.products);\n  // let CartItems = cartItems;\n  const [CartItems,setCartItems]=useState(cartItems);\n  const [call, setcall] = useState(0);\n  const [loading, setLoading] = useState(false);\n  console.log(CartItems);\n  const { pathname } = location;\n  let cartTotalPrice = 0;\n  const fetchingErrorHandler = (err) => {\n    addToast(err, {\n      appearance: \"warning\",\n      autoDismiss: true\n    })\n  }\n  const modifyCartItems = (data) => {\n    console.log(CartItems);\n    CartItems.forEach((element, index) => {\n      \n      const product = data.find((obj) => {\n        console.log(obj, element);\n        return obj._id === element._id;\n      });\n      console.log(product);\n      if (product)\n      {\n        setCartItems((state)=>{\n          let temp=[...state];\n          temp[index].stock = product.stock;\n          temp[index].discountedPrice=product.discountedPrice;\n          temp[index].productName=product.productName;\n          temp[index].category=product.category;\n          temp[index].price=product.price;\n          if (temp[index].quantity > temp[index].stock) {\n            temp[index].quantity = temp[index].stock;\n          }\n          return temp;\n        })\n      }\n      else\n        delete CartItems[index];\n      console.log(CartItems);\n    })\n    replace(CartItems);\n    setcall(0);\n  }\n  useEffect(() => {\n    setCartItems(cartItems)\n  }, [cartItems]);\n  useEffect(() => {\n    setLoading(true);\n    fetch(`${URL}getProducts`).then(\n      res => {\n        console.log(res);\n        if (res.status == 400) {\n          fetchingErrorHandler(\"Error while Fetching Products here\");\n        }\n        return res.json();\n      }\n      ).then(\n        data => {\n          setLoading(false);\n          setProducts(data);\n          console.log(data);\n          modifyCartItems(data);\n      }\n    ).catch(err => {\n      console.log(err)\n      // fetchingErrorHandler(\"Error while Fetching Products there\");\n    });\n  }, []);\n  return (\n    <Fragment>\n      <MetaTags>\n        <title>Flone | Cart</title>\n        <meta\n          name=\"description\"\n          content=\"Cart page of flone react minimalist eCommerce template.\"\n        />\n      </MetaTags>\n\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>Home</BreadcrumbsItem>\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\n        Cart\n      </BreadcrumbsItem>\n\n      <LayoutOne SetUserLogin={SetUserLogin}  headerTop=\"visible\" isLogin={isLogin}>\n        {/* breadcrumb */}\n        <Breadcrumb />\n        <div className=\"cart-main-area pt-90 pb-100\">\n          <div className=\"container\">\n            {loading&&<Loading></Loading>}\n            {CartItems && CartItems.length >= 1 ? (\n              <Fragment>\n                <h3 className=\"cart-page-title\">Your cart items</h3>\n                <div className=\"row\">\n                  <div className=\"col-12\">\n                    <div className=\"table-content table-responsive cart-table-content\">\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Product</th>\n                            <th>Unit Price</th>\n                            <th>Qty</th>\n                            <th>Subtotal</th>\n                            <th>action</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {CartItems.map((cartItem, key) => {\n                            console.log(CartItems,key);\n                            console.log(cartItem,cartItem.quantity);\n                            const discountedPrice = cartItem.discountedPrice;\n                            // const discountedPrice = getDiscountPrice(\n                            //   cartItem.price,\n                            //   cartItem.discount\n                            // );\n                            const finalProductPrice = (\n                              cartItem.price * currency.currencyRate\n                            ).toFixed(2);\n                            const finalDiscountedPrice = (\n                              discountedPrice * currency.currencyRate\n                            ).toFixed(2);\n                            let discount =100- (discountedPrice / cartItem.price) * 100;\n                            discount = Math.floor(discount);\n                            discountedPrice != null\n                              ? (cartTotalPrice +=\n                                  finalDiscountedPrice * cartItem.quantity)\n                              : (cartTotalPrice +=\n                                  finalProductPrice * cartItem.quantity);\n                            return (\n                              <tr key={key}>\n                                <td className=\"product-thumbnail\">\n                                  {/* <Link\n                                    to={\n                                      process.env.PUBLIC_URL +\n                                      \"/product/\" +\n                                      cartItem.id\n                                    }\n                                  > */}\n                                    <img\n                                      className=\"img-fluid\"\n                                      src={\n                                        imageURL +\n                                        cartItem.image\n                                      }\n                                      alt=\"\"\n                                    />\n                                  {/* </Link> */}\n                               \n                                  {/* <Link\n                                    to={\n                                      process.env.PUBLIC_URL +\n                                      \"/product/\" +\n                                      cartItem.productID\n                                    }\n                                  > */}\n                                    {cartItem.productName}\n                                  {/* </Link> */}\n                                  {cartItem.selectedProductColor &&\n                                  cartItem.selectedProductSize ? (\n                                    <div className=\"cart-item-variation\">\n                                      <span>\n                                        Color: {cartItem.selectedProductColor}\n                                      </span>\n                                      <span>\n                                        Size: {cartItem.selectedProductSize}\n                                      </span>\n                                    </div>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </td>\n\n                                <td className=\"product-price-cart\">\n                                  {discountedPrice !== null ? (\n                                    <Fragment>\n                                      <span className=\"amount old\">\n                                        {currency.currencySymbol +\n                                          finalProductPrice}\n                                      </span>\n                                      <span className=\"amount\">\n                                        {currency.currencySymbol +\n                                          finalDiscountedPrice}\n                                      </span>\n                                    </Fragment>\n                                  ) : (\n                                    <span className=\"amount\">\n                                      {currency.currencySymbol +\n                                        finalProductPrice}\n                                    </span>\n                                  )}\n                                </td>\n\n                                <td className=\"product-quantity\">\n                                  {cartItem.stock===0?\"Out of Stock\":<div className=\"cart-plus-minus\">\n                                    <button\n                                      className=\"dec qtybutton\"\n                                      onClick={() =>\n                                        decrementQty(cartItem, addToast)\n                                      }\n                                    >\n                                      -\n                                    </button>\n                                    <input\n                                      className=\"cart-plus-minus-box\"\n                                      type=\"text\"\n                                      value={cartItem.quantity}\n                                      readOnly\n                                    />\n                                    <button\n                                      className=\"inc qtybutton\"\n                                      onClick={() =>\n                                        addToCart(\n                                          cartItem,\n                                          addToast,\n                                          quantityCount\n                                        )\n                                      }\n                                      disabled={\n                                        cartItem !== undefined &&\n                                        cartItem.quantity &&\n                                        cartItem.quantity >=\n                                          cartItem.stock\n                                      }\n                                    >\n                                      +\n                                    </button>\n                                  </div>}\n                                </td>\n                                <td className=\"product-subtotal\">\n                                  {discountedPrice !== null\n                                    ? currency.currencySymbol +\n                                      (\n                                        finalDiscountedPrice * cartItem.quantity\n                                      ).toFixed(2)\n                                    : currency.currencySymbol +\n                                      (\n                                        finalProductPrice * cartItem.quantity\n                                      ).toFixed(2)}\n                                </td>\n\n                                <td className=\"product-remove\">\n                                  <button\n                                    onClick={() =>\n                                      removeFromCart(cartItem, addToast)\n                                    }\n                                  >\n                                    <i className=\"fa fa-times\"></i>\n                                  </button>\n                                </td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-lg-12\">\n                    <div className=\"cart-shiping-update-wrapper\">\n                      <div className=\"cart-shiping-update\">\n                        <Link\n                          to={process.env.PUBLIC_URL + \"/\"}\n                        >\n                          Continue Shopping\n                        </Link>\n                      </div>\n                      <div className=\"cart-clear\">\n                        <button onClick={() => removeAllFromCart(addToast)}>\n                          Clear Shopping Cart\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"row justify-content-center\">\n                  {/* <div className=\"col-lg-4 col-md-6\">\n                    <div className=\"cart-tax\">\n                      <div className=\"title-wrap\">\n                        <h4 className=\"cart-bottom-title section-bg-gray\">\n                          Estimate Shipping And Tax\n                        </h4>\n                      </div>\n                      <div className=\"tax-wrapper\">\n                        <p>\n                          Enter your destination to get a shipping estimate.\n                        </p>\n                        <div className=\"tax-select-wrapper\">\n                          <div className=\"tax-select\">\n                            <label>* Country</label>\n                            <select className=\"email s-email s-wid\">\n                              <option>Bangladesh</option>\n                              <option>Albania</option>\n                              <option>Åland Islands</option>\n                              <option>Afghanistan</option>\n                              <option>Belgium</option>\n                            </select>\n                          </div>\n                          <div className=\"tax-select\">\n                            <label>* Region / State</label>\n                            <select className=\"email s-email s-wid\">\n                              <option>Bangladesh</option>\n                              <option>Albania</option>\n                              <option>Åland Islands</option>\n                              <option>Afghanistan</option>\n                              <option>Belgium</option>\n                            </select>\n                          </div>\n                          <div className=\"tax-select\">\n                            <label>* Zip/Postal Code</label>\n                            <input type=\"text\" />\n                          </div>\n                          <button className=\"cart-btn-2\" type=\"submit\">\n                            Get A Quote\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"col-lg-4 col-md-6\">\n                    <div className=\"discount-code-wrapper\">\n                      <div className=\"title-wrap\">\n                        <h4 className=\"cart-bottom-title section-bg-gray\">\n                          Use Coupon Code\n                        </h4>\n                      </div>\n                      <div className=\"discount-code\">\n                        <p>Enter your coupon code if you have one.</p>\n                        <form>\n                          <input type=\"text\" required name=\"name\" />\n                          <button className=\"cart-btn-2\" type=\"submit\">\n                            Apply Coupon\n                          </button>\n                        </form>\n                      </div>\n                    </div>\n                  </div> */}\n\n                  <div className=\"col-lg-4 col-md-12\">\n                    <div className=\"grand-totall\">\n                      <div className=\"title-wrap\">\n                        <h4 className=\"cart-bottom-title section-bg-gary-cart\">\n                          Cart Total\n                        </h4>\n                      </div>\n                      <h5>\n                        Total products{\" \"}\n                        <span>\n                          {currency.currencySymbol + cartTotalPrice.toFixed(2)}\n                        </span>\n                      </h5>\n\n                      <h4 className=\"grand-totall-title\">\n                        Grand Total{\" \"}\n                        <span>\n                          {currency.currencySymbol + cartTotalPrice.toFixed(2)}\n                        </span>\n                      </h4>\n                      \n                   {isLogin?<Link to={process.env.PUBLIC_URL + \"/checkout\"}>\n                        Proceed to Checkout\n                      </Link>:<Link onClick={()=>{\n                          addToast(\"Login to checkout\", {\n                            appearance: \"warning\",\n                            autoDismiss: true\n                          });\n                      }} to={process.env.PUBLIC_URL + \"/login-register\"}>\n                        Proceed to Checkout\n                      </Link>}\n\n                    </div>\n                  </div>\n                </div>\n              </Fragment>\n            ) : (\n              <div className=\"row\">\n                <div className=\"col-lg-12\">\n                  <div className=\"item-empty-area text-center\">\n                    <div className=\"item-empty-area__icon mb-30\">\n                      <i className=\"pe-7s-cart\"></i>\n                    </div>\n                    <div className=\"item-empty-area__text\">\n                      No items found in cart <br />{\" \"}\n                      <Link to={process.env.PUBLIC_URL + \"/\"}>\n                        Shop Now\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </LayoutOne>\n    </Fragment>\n  );\n};\n\nCart.propTypes = {\n  addToCart: PropTypes.func,\n  cartItems: PropTypes.array,\n  currency: PropTypes.object,\n  decrementQty: PropTypes.func,\n  location: PropTypes.object,\n  removeAllFromCart: PropTypes.func,\n  removeFromCart: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    cartItems: state.cartData,\n    currency: state.currencyData,\n    products:state.productData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addToCart: (item, addToast, quantityCount) => {\n      dispatch(addToCart(item, addToast, quantityCount));\n    },\n    decrementQty: (item, addToast) => {\n      dispatch(decrementQty(item, addToast));\n    },\n    removeFromCart: (item, addToast) => {\n      dispatch(removeFromCart(item, addToast));\n    },\n    removeAllFromCart: addToast => {\n      dispatch(removeAllFromCart(addToast));\n    },\n    replace: (data) => {\n      dispatch(replace(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);\n"],"sourceRoot":""}